import os
import asyncio
from telebot.async_telebot import AsyncTeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from mongo import process_excel_file, toggle_account_state, get_accounts_stats_by_owner_id, retrieve_and_categorize_accounts, save_api_key
import logging
from collections import defaultdict
import openpyxl

API_TOKEN = os.environ.get("API_TOKEN", "7214897743:AAHamDqE6ZFvemyLNQU-qF3CaU2ul3OEeC8")
bot = AsyncTeleBot(API_TOKEN)

waiting_for_api_key = defaultdict(bool)
waiting_for_accounts_file = defaultdict(bool)

def create_main_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á", callback_data="set_api_key"))
    keyboard.row(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="add_accounts"))
    keyboard.row(InlineKeyboardButton("–°—Ç–∞—Ä—Ç/–°—Ç–æ–ø —Ñ–∞—Ä–º–∏–Ω–≥–∞", callback_data="start_stop_farming"))
    keyboard.row(InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"))
    keyboard.row(InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö", callback_data="info_accounts"))
    keyboard.row(InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help"))
    return keyboard

@bot.message_handler(commands=['start', 'help'])
async def send_welcome(message):
    user_name = message.chat.username or message.chat.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    welcome_text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{user_name}, –≤ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏!\n\n"
        "üîë –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–π API –∫–ª—é—á –æ—Ç Capmonster, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á'.\n\n"
        "üìÅ –ó–∞—Ç–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã' –∏ —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
        "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–°—Ç–∞—Ä—Ç/–°—Ç–æ–ø —Ñ–∞—Ä–º–∏–Ω–≥–∞' –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–æ–π –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n\n"
        "üìä –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö —Å –ø–æ–º–æ—â—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    await bot.reply_to(message, welcome_text, reply_markup=create_main_keyboard())

@bot.callback_query_handler(func=lambda call: True)
async def callback_query(call):
    if call.data == "add_accounts":
        await add_accounts_command(call.message)
    elif call.data == "start_stop_farming":
        await farm_command(call.message)
    elif call.data == "stats":
        await stats_command(call.message)
    elif call.data == "info_accounts":
        await info_accounts_command(call.message)
    elif call.data == "set_api_key":
        await set_api_key_command(call.message)
    elif call.data == "help":
        await send_help_message(call.message)

async def send_help_message(message):
    help_text = (
        "üîë –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á: –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á –æ—Ç Capmonster –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á.\n\n"
        "üìÅ –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
        "üîÑ –°—Ç–∞—Ä—Ç/–°—Ç–æ–ø —Ñ–∞—Ä–º–∏–Ω–≥–∞: –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–∞–±–æ—Ç–æ–π –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–∞–º.\n\n"
        "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö: –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )
    await bot.send_message(message.chat.id, help_text, reply_markup=create_main_keyboard())

async def add_accounts_command(message):
    user_id = str(message.chat.id)
    waiting_for_accounts_file[user_id] = True
    
    example_file_path = 'accounts_example.xlsx'
    user_name = message.chat.first_name or message.chat.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    instructions = (
        f'–ü—Ä–∏–≤–µ—Ç, {user_name}! –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ —ç—Ç–∏–º —à–∞–≥–∞–º:\n\n'
        '1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –µ–∫—Å–µ–ª—å —Ñ–∞–π–ª (.xlsx) —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n'
        '2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ —á–∞—Ç\n'
        '–ü—Ä–æ–∫—Å–∏ —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ http/https(–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ —Ñ–∞–π–ª–∞)!!!\n'
        '–ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ DAWN —Ç–æ –ø–æ–ª—è registered verified-(FALSE)\n\n'
        '–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω –ø—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞:'
    )
    
    await bot.send_message(message.chat.id, instructions)
    
    with open(example_file_path, 'rb') as file:
        await bot.send_document(message.chat.id, file, caption='–ü—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞')
    
    await bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ñ–∞–π–ª —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏.')

async def farm_command(message):
    user_id = message.chat.id

    await bot.send_message(message.chat.id, '–ú–µ–Ω—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Ä–∞–±–æ—Ç–∞/—Å–æ–Ω)')
    result = await toggle_account_state(owner_id=str(user_id))
    if result[0] == 1:
        await bot.send_message(message.chat.id, '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã".')
    else:
        await bot.send_message(message.chat.id, f'–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å {result[1]} –Ω–∞ {result[2]}')
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_main_keyboard())

async def stats_command(message):
    user_id = message.chat.id
    result = await get_accounts_stats_by_owner_id(owner_id=str(user_id))
    if result['accounts'] == 0:
        await bot.send_message(message.chat.id, '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã".')
    else:
        await bot.send_message(message.chat.id, f'–£ –≤–∞—Å: {result["accounts"]} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {result["fully_registered_and_verified"]}\n–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {result['accounts']-result["fully_registered_and_verified"]-result["registration_failed"]}\n–ù–ï –ø—Ä–æ—à–µ–¥—à–∏—Ö: {result["registration_failed"]}\n{result["total_points"]} –ø–æ–∏–Ω—Ç–æ–≤ –≤ —Å—É–º–º–µ')
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_main_keyboard())
    
async def info_accounts_command(message):
    user_id = message.chat.id
    
    await bot.send_message(message.chat.id, '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö...')
    try:
        filename = await retrieve_and_categorize_accounts(str(user_id))
        with open(filename, 'rb') as file:
            await bot.send_document(message.chat.id, file, caption='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö')
        os.remove(filename)
    except Exception as e:
        logging.error(f"Error in info_accounts_command: {str(e)}")
        await bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_main_keyboard())

async def set_api_key_command(message):
    user_id = str(message.chat.id)
    waiting_for_api_key[user_id] = True
    logging.debug(f"Waiting for API key from user {user_id}")
    instructions = (
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞:\n\n"
        "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ [CapMonster Cloud](https://capmonster.cloud/)\n"
        "2. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å\n"
        "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à API-–∫–ª—é—á\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á –æ—Ç CapMonster –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
    )
    await bot.send_message(message.chat.id, instructions, parse_mode='Markdown', disable_web_page_preview=True)
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_main_keyboard())

@bot.message_handler(content_types=['document'])
async def handle_docs(message):
    user_id = str(message.chat.id)
    
    if not waiting_for_accounts_file.get(user_id, False):
        await bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã".')
        return
    
    if message.document.mime_type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
        file_info = await bot.get_file(message.document.file_id)
        file_path = f'temp_accounts_{user_id}.xlsx'  # Save the file with the user_id in the name
        downloaded_file = await bot.download_file(file_info.file_path)
        
        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)
    
        try:
            result = await process_excel_file(file_path, user_id)  # Process the .xlsx file
            os.remove(file_path)  # Remove the file after processing

            
            if isinstance(result, str):
                if result.startswith('invalid_entries_'):
                    with open(result, 'rb') as file:
                        await bot.send_document(message.chat.id, file, caption='–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏')
                    os.remove(result)
                    await bot.reply_to(message, '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏. –§–∞–π–ª —Å –Ω–∏–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ.')
                else:
                    await bot.reply_to(message, result)
            else:
                await bot.reply_to(message, '–í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –Ω–∞—á–∏–Ω–∞—é—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.')
        
        except Exception as e:
            logging.error(f"Error processing file: {str(e)}")
            await bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    else:
        await bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel (.xlsx)')
    
    waiting_for_accounts_file[user_id] = False
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_main_keyboard())




@bot.message_handler(func=lambda message: waiting_for_api_key.get(str(message.chat.id), False))
async def receive_api_key(message):
    user_id = str(message.chat.id)
    api_key = message.text.strip()
    logging.debug(f"Received potential API key from user {user_id}: {api_key}")
    
    try:
        result = await save_api_key(user_id, api_key)
        
        if result['status'] in ['updated', 'inserted']:
            success_message = f"{result['message']}\n\n–í–∞—à –Ω–æ–≤—ã–π API –∫–ª—é—á: `{api_key}`"
            await bot.reply_to(message, success_message, parse_mode='Markdown')
        else:
            await bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"Error saving API key: {str(e)}")
        await bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ API –∫–ª—é—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
    
    waiting_for_api_key[user_id] = False
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_main_keyboard())

@bot.message_handler(func=lambda message: True)
async def handle_all_messages(message):
    logging.debug(f"Received message: {message.text}")
    if waiting_for_api_key.get(str(message.chat.id), False):
        await receive_api_key(message)
    else:
        await bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_main_keyboard())

async def main():
    while True:
        try:
            await bot.polling(non_stop=True)
        except Exception as e:
            print(f"An error occurred: {e}")
            await asyncio.sleep(5)

if __name__ == '__main__':
    asyncio.run(main())